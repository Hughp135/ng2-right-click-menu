{"version":3,"file":"ng2-right-click-menu.js","sources":["ts/src/ng2-right-click-menu.ts","ts/src/sh-context-menu.module.ts","ts/src/sh-context-sub-menu.directive.ts","ts/src/sh-context-menu.directive.ts","ts/src/sh-context-menu.component.ts","ts/src/sh-context-service.ts","ts/src/sh-context-menu.models.ts","ts/src/injector.service.ts","ts/src/sh-context-overlay.component.ts","ts/src/html.directive.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ShContextMenuModule,IShContextMenuItem,IShContextOptions,BeforeMenuEvent} from './index';\n\nexport {HtmlDirective as ɵh} from './html.directive';\nexport {InjectionService as ɵd} from './injector.service';\nexport {ShContextMenuComponent as ɵe} from './sh-context-menu.component';\nexport {ShContextMenuDirective as ɵa} from './sh-context-menu.directive';\nexport {ShContextOverlayComponent as ɵg} from './sh-context-overlay.component';\nexport {ShContextService as ɵb,ShContextServiceModule as ɵc} from './sh-context-service';\nexport {ShContextSubMenuDirective as ɵf} from './sh-context-sub-menu.directive';","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HtmlDirective } from './html.directive';\nimport { ShContextOverlayComponent } from './sh-context-overlay.component';\nimport { ShContextMenuDirective } from './sh-context-menu.directive';\nimport { ShContextMenuComponent } from './sh-context-menu.component';\nimport { ShContextSubMenuDirective } from './sh-context-sub-menu.directive';\nimport { ShContextServiceModule } from './sh-context-service';\nexport class ShContextMenuModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    ShContextMenuDirective,\n    ShContextMenuComponent,\n    ShContextSubMenuDirective,\n    ShContextOverlayComponent,\n    HtmlDirective\n  ],\n  exports: [ShContextMenuDirective],\n  imports: [\n    CommonModule,\n    ShContextServiceModule\n  ],\n  entryComponents: [\n    ShContextMenuComponent,\n    ShContextOverlayComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShContextMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextMenuModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Output, ElementRef, EventEmitter, Input, HostListener, ViewContainerRef, ComponentFactoryResolver, ComponentRef, OnInit } from '@angular/core';\n\nimport { ShContextMenuComponent, ShContextPosition } from './sh-context-menu.component';\nimport { ShContextService } from './sh-context-service';\nimport {IShContextMenuItem, IShContextOptions} from './sh-context-menu.models';\nexport class ShContextSubMenuDirective implements OnInit {\n   menuItems: IShContextMenuItem[];\n   dataContext: any;\n   closeSubMenu = new EventEmitter();\n\n  options: IShContextOptions;\n  ctxComponent: ComponentRef<ShContextMenuComponent>;\n/**\n * @param {?} viewRef\n * @param {?} elmRef\n * @param {?} resolver\n * @param {?} ctxService\n */\nconstructor(\nprivate viewRef: ViewContainerRef,\nprivate elmRef: ElementRef,\nprivate resolver: ComponentFactoryResolver,\nprivate ctxService: ShContextService\n  ) { }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this.options = this.ctxService.getOptions();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nonMouseOver(event: MouseEvent) {\n    this.closeCurrent();\n    this.ctxComponent = this.createContextComponent();\n\n    this.registerBindings();\n    this.registerEvents();\n    this.setLocation();\n\n    return false;\n  }\n/**\n * @return {?}\n */\nregisterEvents() {\n    this.ctxComponent.instance.onClose.subscribe(() => {\n      this.closeSubMenu.emit();\n    });\n  }\n/**\n * @return {?}\n */\nregisterBindings() {\n    this.ctxComponent.instance.items = this.menuItems;\n    this.ctxComponent.instance.dataContext = this.dataContext;\n  }\n/**\n * @return {?}\n */\ncreateContextComponent(): ComponentRef<ShContextMenuComponent> {\n    let /** @type {?} */ shContextMenuFactory = this.resolver.resolveComponentFactory(ShContextMenuComponent);\n    let /** @type {?} */ shContextComponentRef = this.viewRef.createComponent(shContextMenuFactory);\n\n    return shContextComponentRef;\n  }\n/**\n * @return {?}\n */\nsetLocation() {\n    const { top, left, width } =\n      this.elmRef.nativeElement.getClientRects()[0];\n\n    let /** @type {?} */ position: ShContextPosition = {\n      top: top,\n      left: this.options.rtl ? left : left + width\n    };\n\n    this.ctxComponent.instance.position = position;\n  }\n/**\n * @return {?}\n */\ncloseMenu() {\n    this.closeSubMenu.emit();\n  }\n/**\n * @return {?}\n */\ncloseCurrent() {\n    this.viewRef.clear();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[sh-context-sub-menu]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: ElementRef, },\n{type: ComponentFactoryResolver, },\n{type: ShContextService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'menuItems': [{ type: Input, args: ['sh-context-sub-menu', ] },],\n'dataContext': [{ type: Input, args: ['sh-data-context', ] },],\n'closeSubMenu': [{ type: Output },],\n'onMouseOver': [{ type: HostListener, args: ['mouseover', ['$event'], ] },],\n};\n}\n\nfunction ShContextSubMenuDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextSubMenuDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextSubMenuDirective.ctorParameters;\n/** @type {?} */\nShContextSubMenuDirective.propDecorators;\n/** @type {?} */\nShContextSubMenuDirective.prototype.menuItems;\n/** @type {?} */\nShContextSubMenuDirective.prototype.dataContext;\n/** @type {?} */\nShContextSubMenuDirective.prototype.closeSubMenu;\n/** @type {?} */\nShContextSubMenuDirective.prototype.options;\n/** @type {?} */\nShContextSubMenuDirective.prototype.ctxComponent;\n/** @type {?} */\nShContextSubMenuDirective.prototype.viewRef;\n/** @type {?} */\nShContextSubMenuDirective.prototype.elmRef;\n/** @type {?} */\nShContextSubMenuDirective.prototype.resolver;\n/** @type {?} */\nShContextSubMenuDirective.prototype.ctxService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ShContextService} from './sh-context-service';\nimport {\n  Directive,\n  Input,\n  HostListener,\n  ComponentRef,\n  Output, EventEmitter\n} from '@angular/core';\n\nimport {ShContextOverlayComponent} from './sh-context-overlay.component';\nimport {ShContextMenuComponent} from './sh-context-menu.component';\nimport {InjectionService} from './injector.service';\nimport {BeforeMenuEvent, IShContextMenuItem, IShContextOptions} from './sh-context-menu.models';\nexport class ShContextMenuDirective {\n   menuItems: IShContextMenuItem[];\n   dataContext: any;\n   options: IShContextOptions;\n\n   onBeforeMenuOpen = new EventEmitter<BeforeMenuEvent>();\n\n  ctxComponent: ComponentRef<ShContextMenuComponent>;\n  overlayComponent: ComponentRef<ShContextOverlayComponent>;\n/**\n * @param {?} ctxService\n * @param {?} injectionService\n */\nconstructor(private ctxService: ShContextService,\nprivate injectionService: InjectionService) {\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nonClick(event: MouseEvent): boolean | void {\n    this.options = this.ctxService.setOptions(this.options);\n\n    this.closeMenu();\n\n    if ( this.contextMenuIsEmpty() ) {\n      return;\n    }\n\n    if (this.onBeforeMenuOpen.observers.length > 0) {\n      this.onBeforeMenuOpen.emit({\n        event: event,\n        items: this.menuItems,\n        open: (modifiedItems: IShContextMenuItem[] = this.menuItems) => this.createMenu(event, modifiedItems)\n      });\n    } else {\n      this.createMenu(event);\n    }\n\n    return false;\n  }\n/**\n * @param {?} event\n * @param {?=} items\n * @return {?}\n */\nprivate createMenu(event: MouseEvent, items: IShContextMenuItem[] = this.menuItems) {\n    this.overlayComponent = this.createOverlayComponent();\n    this.ctxComponent = this.createContextComponent();\n\n    this.registerBindings(items);\n    this.registerEvents();\n    this.setLocation(event);\n  }\n/**\n * @return {?}\n */\nregisterEvents() {\n    this.ctxComponent.instance.onClose.subscribe(() => {\n      this.closeMenu()\n    });\n\n    this.overlayComponent.instance.onClick.subscribe(() => {\n      this.closeMenu()\n    });\n  }\n/**\n * @param {?} menuItems\n * @return {?}\n */\nregisterBindings(menuItems: IShContextMenuItem[]) {\n    this.ctxComponent.instance.items = menuItems;\n    this.ctxComponent.instance.dataContext = this.dataContext;\n  }\n/**\n * @return {?}\n */\ncreateContextComponent(): ComponentRef<ShContextMenuComponent> {\n    return this.injectionService.appendComponent(ShContextMenuComponent);\n  }\n/**\n * @return {?}\n */\ncreateOverlayComponent(): ComponentRef<ShContextOverlayComponent> {\n    return this.injectionService.appendComponent(ShContextOverlayComponent);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nsetLocation(event: MouseEvent) {\n    let {clientX, clientY} = event;\n\n    this.ctxComponent.instance.position = {\n      top: clientY,\n      left: clientX\n    };\n  }\n/**\n * @return {?}\n */\ncloseMenu() {\n    if (this.ctxComponent)\n      this.ctxComponent.destroy();\n\n    if (this.overlayComponent)\n      this.overlayComponent.destroy();\n  }\n/**\n * @return {?}\n */\nprivate contextMenuIsEmpty(): boolean {\n    return !this.menuItems || this.menuItems.length === 0;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[sh-context]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ShContextService, },\n{type: InjectionService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'menuItems': [{ type: Input, args: ['sh-context', ] },],\n'dataContext': [{ type: Input, args: ['sh-data-context', ] },],\n'options': [{ type: Input, args: ['sh-options', ] },],\n'onBeforeMenuOpen': [{ type: Output, args: ['onBeforeMenuOpen', ] },],\n'onClick': [{ type: HostListener, args: ['contextmenu', ['$event'], ] },],\n};\n}\n\nfunction ShContextMenuDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextMenuDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextMenuDirective.ctorParameters;\n/** @type {?} */\nShContextMenuDirective.propDecorators;\n/** @type {?} */\nShContextMenuDirective.prototype.menuItems;\n/** @type {?} */\nShContextMenuDirective.prototype.dataContext;\n/** @type {?} */\nShContextMenuDirective.prototype.options;\n/** @type {?} */\nShContextMenuDirective.prototype.onBeforeMenuOpen;\n/** @type {?} */\nShContextMenuDirective.prototype.ctxComponent;\n/** @type {?} */\nShContextMenuDirective.prototype.overlayComponent;\n/** @type {?} */\nShContextMenuDirective.prototype.ctxService;\n/** @type {?} */\nShContextMenuDirective.prototype.injectionService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input, Output, EventEmitter, OnInit, ElementRef, ViewChild, AfterContentInit } from '@angular/core';\nimport { IShContextMenuItem, IShContextOptions } from './sh-context-menu.models';\nimport { ShContextService } from './sh-context-service';\n\nexport interface ShContextPosition {\n  top: number;\n  left: number;\n}\nexport class ShContextMenuComponent implements OnInit, AfterContentInit {\n   position: ShContextPosition;\n   items: IShContextMenuItem[];\n   dataContext: any;\n   onClose = new EventEmitter();\n\n  options: IShContextOptions;\n\n   childRef: ElementRef;\n/**\n * @param {?} ctxService\n */\nconstructor(\nprivate ctxService: ShContextService\n  ) { }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this.options = this.ctxService.getOptions();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    if (this.options.rtl)\n      this.setRtlLocation();\n  }\n/**\n * @param {?} item\n * @return {?}\n */\ngetLabel(item: IShContextMenuItem): string {\n    if (typeof item.label === 'string') {\n      return item.label;\n    } else if (typeof item.label === 'function') {\n      return item.label(this.dataContext);\n    }\n    return '';\n  }\n/**\n * @return {?}\n */\nclose() {\n    this.onClose.emit();\n  }\n/**\n * @param {?} item\n * @return {?}\n */\nonClick(item: IShContextMenuItem) {\n    if (this.isItemDisabled(item))\n      return;\n\n    if (item.onClick) {\n      this.close();\n\n      // invoke the onClick handler with a timeout of 0,\n      // so that the menu gets a chance to be closed before (screen refresh)\n      this.invokeOnClickWithTimeOut( item );\n    }\n  }\n/**\n * @param {?} item\n * @return {?}\n */\nprivate invokeOnClickWithTimeOut( item: IShContextMenuItem ) {\n    setTimeout( () => {\n      if ( item.onClick ) {\n        item.onClick({\n          menuItem: item,\n          dataContext: this.dataContext\n        });\n      }\n    }, 0);\n  }\n/**\n * @param {?} item\n * @return {?}\n */\nisItemDisabled(item: IShContextMenuItem) {\n    if (!item.disabled)\n      return false;\n\n    return item.disabled(this.dataContext);\n  }\n/**\n * @param {?} item\n * @return {?}\n */\nisItemVisible(item: IShContextMenuItem) {\n    if (!item.visible)\n      return true;\n\n    return item.visible(this.dataContext);\n  }\n/**\n * @return {?}\n */\nsetRtlLocation() {\n    const /** @type {?} */ elmRect: ClientRect =\n      this.childRef.nativeElement.getClientRects()[0];\n\n    this.position.left = this.position.left - elmRect.width;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sh-context-menu',\n  template: `\n    <div #childRef class=\"sh-context--container\"\n      [class.dark]=\"options.theme == 'dark'\"\n      [style.left]=\"position.left + 'px'\"\n      [style.top]=\"position.top + 'px'\"\n      [style.direction]=\"(options.rtl ? 'rtl' : 'ltr' )\">\n      <ul>\n          <li *ngFor=\"let item of items\"\n            [ngClass]=\"{'sh-menu-item': !item.divider, 'sh-context-divider': item.divider, 'sh-menu-disabled': isItemDisabled(item), 'sh-menu-hidden': !isItemVisible(item)}\"\n            (click)=\"onClick(item)\">\n              <div *ngIf=\"!item.divider && !item.subMenu\" [sh-html]=\"getLabel(item)\">\n              </div> \n              <div *ngIf=\"item.subMenu\"\n                [sh-context-sub-menu]=\"item.subMenuItems\"\n                [sh-data-context]=\"dataContext\"\n                (closeSubMenu)=\"close()\"\n                [sh-html]=\"item.label\">\n               <div [ngClass]=\"{'right-arrow': !options.rtl, 'left-arrow': options.rtl}\"></div>\n              </div>\n          </li>\n      </ul>\n    </div>\n`,\n  styles: [`\n  .sh-context--container{\n    font-family: sans-serif;\n    position: fixed;\n    background: #ececec;\n    min-width: 150px;\n    border: 1px solid rgba(0,0,0,0.2);\n    border-radius: 3px;\n    box-shadow: 0 0 10px 2px rgba(0,0,0,0.1);\n    z-index: 9999;\n    color: black;\n\n    \n  }\n  .dark{\n      background:#383737 !important;\n      color:white !important;\n    }\n  .sh-context--container ul{\n    list-style: none;\n    padding: 5px 0;\n    margin: 0;\n  }\n\n  .sh-context--container ul li{\n      padding: 5px 10px 5px 15px;\n      transition: all 0.15s;\n  }\n\n  .sh-context--container ul li.sh-context-divider{\n      height: 1px;\n      margin: 1px 1px 8px 1px;\n      overflow: hidden;\n      border-bottom: 1px solid #d0d0d0;\n      line-height: 10px;\n    }\n\n  .sh-context--container ul li.sh-menu-item:hover{\n      cursor: pointer;\n      background: #4b8bec;\n      color: white;\n  }\n \n   .sh-context--container.dark ul li.sh-menu-item:hover{\n      cursor: pointer;\n      background: #4b8bec;\n      color: white;\n  }\n  .sh-context--container ul li.sh-menu-disabled{\n      color: #d0d0d0;\n   }\n\n   .sh-context--container ul li.sh-menu-item.sh-menu-hidden{\n      display: none;\n   }\n\n  .sh-context--container ul li.sh-menu-disabled:hover{\n      cursor: not-allowed;\n      color: #d0d0d0;\n      background: #ececec;\n  }\n\n  .right-arrow{\n    float: right;\n    margin-left: 10px;\n    margin-top: 3px;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n    border-left: 8px solid black;\n  }\n\n  .left-arrow{\n    float: left;\n    margin-right: 10px;\n    margin-top: 3px;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n    border-right: 8px solid black;\n  }\n`]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ShContextService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input },],\n'items': [{ type: Input },],\n'dataContext': [{ type: Input },],\n'onClose': [{ type: Output },],\n'childRef': [{ type: ViewChild, args: ['childRef', ] },],\n};\n}\n\nfunction ShContextMenuComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextMenuComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextMenuComponent.ctorParameters;\n/** @type {?} */\nShContextMenuComponent.propDecorators;\n/** @type {?} */\nShContextMenuComponent.prototype.position;\n/** @type {?} */\nShContextMenuComponent.prototype.items;\n/** @type {?} */\nShContextMenuComponent.prototype.dataContext;\n/** @type {?} */\nShContextMenuComponent.prototype.onClose;\n/** @type {?} */\nShContextMenuComponent.prototype.options;\n/** @type {?} */\nShContextMenuComponent.prototype.childRef;\n/** @type {?} */\nShContextMenuComponent.prototype.ctxService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, NgModule } from '@angular/core';\nimport {InjectionService} from './injector.service';\nimport {IShContextOptions, ShContextDefaultOptions} from './sh-context-menu.models';\nexport class ShContextService {\n  options: IShContextOptions;\n/**\n * @param {?} opts\n * @return {?}\n */\nsetOptions(opts: IShContextOptions): IShContextOptions {\n    this.options = Object.assign({}, ShContextDefaultOptions, opts);\n    return this.options;\n  }\n/**\n * @return {?}\n */\ngetOptions(): IShContextOptions{\n    return this.options;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShContextService_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextService.ctorParameters;\n/** @type {?} */\nShContextService.prototype.options;\n}\n\nexport class ShContextServiceModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [ShContextService, InjectionService]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShContextServiceModule_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextServiceModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextServiceModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","export const /** @type {?} */ ShContextDefaultOptions: IShContextOptions = {\n  rtl: false,\n  theme: 'light'\n};\n\nexport interface IShContextMenuItem {\n  label?: ((context: any) => string) | string;\n  id?: string;\n  divider?: boolean;\n  onClick?($event: any): void;\n  visible?(context: any): boolean;\n  disabled?(context: any): boolean;\n  subMenu?: boolean;\n  subMenuItems?: IShContextMenuItem[];\n  data?: any;\n}\n\nexport interface IShContextOptions {\n  rtl?: boolean;\n  theme?: 'light' | 'dark'\n}\n\nexport interface BeforeMenuEvent {\n  event: MouseEvent;\n  items: IShContextMenuItem[];\n  open(items?: IShContextMenuItem[]): void;\n}\n","import {\n  ApplicationRef, ComponentFactoryResolver, ComponentRef, Injectable,\n  Injector, EmbeddedViewRef, Type\n} from '@angular/core';\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n * \n * @export\n * \\@class InjectionService\n */\nexport class InjectionService {\nprivate _container: ComponentRef<any>;\n/**\n * @param {?} applicationRef\n * @param {?} componentFactoryResolver\n * @param {?} injector\n */\nconstructor(\nprivate applicationRef: ApplicationRef,\nprivate componentFactoryResolver: ComponentFactoryResolver,\nprivate injector: Injector) {\n  }\n/**\n * Gets the root view container to inject the component to.\n * \n * \n * \\@memberOf InjectionService\n * @return {?}\n */\ngetRootViewContainer(): ComponentRef<any> {\n    if(this._container) return this._container;\n\n    const /** @type {?} */ rootComponents = this.applicationRef['components'];\n    if (rootComponents.length) return rootComponents[0];\n\n    throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer.');\n  }\n/**\n * Overrides the default root view container. This is useful for\n * things like ngUpgrade that doesn't have a ApplicationRef root.\n * \n * \n * \\@memberOf InjectionService\n * @param {?} container\n * @return {?}\n */\nsetRootViewContainer(container:any): void {\n    this._container = container;\n  }\n/**\n * Gets the html element for a component ref.\n * \n * \n * \\@memberOf InjectionService\n * @param {?} componentRef\n * @return {?}\n */\ngetComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n  }\n/**\n * Gets the root component container html element.\n * \n * \n * \\@memberOf InjectionService\n * @return {?}\n */\ngetRootViewContainerNode(): HTMLElement {\n    return this.getComponentRootNode(this.getRootViewContainer());\n  }\n/**\n * Projects the inputs onto the component\n * \n * \n * \\@memberOf InjectionService\n * @param {?} component\n * @param {?} options\n * @return {?}\n */\nprojectComponentInputs(component: ComponentRef<any>, options: any): ComponentRef<any> {\n    if(options) {\n      const /** @type {?} */ props = Object.getOwnPropertyNames(options);\n      for(const /** @type {?} */ prop of props) {\n        component.instance[prop] = options[prop];\n      }\n    }\n\n    return component;\n  }\n/**\n * Appends a component to a adjacent location\n * \n * \n * \\@memberOf InjectionService\n * @template T\n * @param {?} componentClass\n * @param {?=} options\n * @param {?=} location\n * @return {?}\n */\nappendComponent<T>(\n    componentClass: Type<T>,\n    options: any = {},\n    location: Element = this.getRootViewContainerNode()): ComponentRef<any> {\n\n    let /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentClass);\n    let /** @type {?} */ componentRef = componentFactory.create(this.injector);\n    let /** @type {?} */ appRef: any = this.applicationRef;\n    let /** @type {?} */ componentRootNode = this.getComponentRootNode(componentRef);\n\n    // project the options passed to the component instance\n    this.projectComponentInputs(componentRef, options);\n\n    appRef.attachView(componentRef.hostView);\n\n    componentRef.onDestroy(() => {\n      appRef.detachView(componentRef.hostView);\n    });\n\n    location.appendChild(componentRootNode);\n\n    return componentRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ApplicationRef, },\n{type: ComponentFactoryResolver, },\n{type: Injector, },\n];\n}\n\nfunction InjectionService_tsickle_Closure_declarations() {\n/** @type {?} */\nInjectionService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInjectionService.ctorParameters;\n/** @type {?} */\nInjectionService.prototype._container;\n/** @type {?} */\nInjectionService.prototype.applicationRef;\n/** @type {?} */\nInjectionService.prototype.componentFactoryResolver;\n/** @type {?} */\nInjectionService.prototype.injector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { EventEmitter } from '@angular/core';\nimport { Output } from '@angular/core';\nimport { Component } from '@angular/core';\nexport class ShContextOverlayComponent{\n   onClick = new EventEmitter()\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sh-context-overlay',\n  template: `<div class=\"sh-context-overlay\" (mousedown)=\"onClick.emit()\"></div>`,\n  styles: [`\n    .sh-context-overlay{\n      position: fixed;\n      top:0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      z-index: 9998;\n      background-color: transparent;\n   }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onClick': [{ type: Output },],\n};\n}\n\nfunction ShContextOverlayComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextOverlayComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextOverlayComponent.ctorParameters;\n/** @type {?} */\nShContextOverlayComponent.propDecorators;\n/** @type {?} */\nShContextOverlayComponent.prototype.onClick;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ElementRef } from '@angular/core';\nimport { AfterContentInit } from '@angular/core';\nimport { Input } from '@angular/core';\nimport { Directive } from '@angular/core';\nexport class HtmlDirective implements AfterContentInit {\n   content: String;\n/**\n * @param {?} elmRef\n */\nconstructor(private elmRef: ElementRef){}\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this.elmRef.nativeElement.insertAdjacentHTML('afterbegin', this.content);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[sh-html]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: Input, args: ['sh-html', ] },],\n};\n}\n\nfunction HtmlDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nHtmlDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHtmlDirective.ctorParameters;\n/** @type {?} */\nHtmlDirective.propDecorators;\n/** @type {?} */\nHtmlDirective.prototype.content;\n/** @type {?} */\nHtmlDirective.prototype.elmRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}
