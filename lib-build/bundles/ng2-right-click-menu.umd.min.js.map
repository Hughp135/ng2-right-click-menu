{"version":3,"file":"ng2-right-click-menu.umd.min.js","sources":["~/ng2-right-click-menu/src/html.directive.ts","~/ng2-right-click-menu/src/sh-context-overlay.component.ts","~/ng2-right-click-menu/src/injector.service.ts","~/ng2-right-click-menu/src/sh-context-menu.models.ts","~/ng2-right-click-menu/src/sh-context-service.ts","~/ng2-right-click-menu/src/sh-context-menu.component.ts","~/ng2-right-click-menu/src/sh-context-menu.directive.ts","~/ng2-right-click-menu/src/sh-context-sub-menu.directive.ts","~/ng2-right-click-menu/src/sh-context-menu.module.ts"],"sourcesContent":["import { ElementRef } from '@angular/core';\nimport { AfterContentInit } from '@angular/core';\nimport { Input } from '@angular/core';\nimport { Directive } from '@angular/core';\nexport class HtmlDirective implements AfterContentInit {\n   content: String;\n/**\n * @param {?} elmRef\n */\nconstructor(private elmRef: ElementRef){}\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this.elmRef.nativeElement.insertAdjacentHTML('afterbegin', this.content);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[sh-html]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: Input, args: ['sh-html', ] },],\n};\n}\n\nfunction HtmlDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nHtmlDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHtmlDirective.ctorParameters;\n/** @type {?} */\nHtmlDirective.propDecorators;\n/** @type {?} */\nHtmlDirective.prototype.content;\n/** @type {?} */\nHtmlDirective.prototype.elmRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { EventEmitter } from '@angular/core';\nimport { Output } from '@angular/core';\nimport { Component } from '@angular/core';\nexport class ShContextOverlayComponent{\n   onClick = new EventEmitter()\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sh-context-overlay',\n  template: `<div class=\"sh-context-overlay\" (mousedown)=\"onClick.emit()\"></div>`,\n  styles: [`\n    .sh-context-overlay{\n      position: fixed;\n      top:0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      z-index: 9998;\n      background-color: transparent;\n   }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onClick': [{ type: Output },],\n};\n}\n\nfunction ShContextOverlayComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextOverlayComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextOverlayComponent.ctorParameters;\n/** @type {?} */\nShContextOverlayComponent.propDecorators;\n/** @type {?} */\nShContextOverlayComponent.prototype.onClick;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ApplicationRef, ComponentFactoryResolver, ComponentRef, Injectable,\n  Injector, EmbeddedViewRef, Type\n} from '@angular/core';\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n * \n * @export\n * \\@class InjectionService\n */\nexport class InjectionService {\nprivate _container: ComponentRef<any>;\n/**\n * @param {?} applicationRef\n * @param {?} componentFactoryResolver\n * @param {?} injector\n */\nconstructor(\nprivate applicationRef: ApplicationRef,\nprivate componentFactoryResolver: ComponentFactoryResolver,\nprivate injector: Injector) {\n  }\n/**\n * Gets the root view container to inject the component to.\n * \n * \n * \\@memberOf InjectionService\n * @return {?}\n */\ngetRootViewContainer(): ComponentRef<any> {\n    if(this._container) return this._container;\n\n    const /** @type {?} */ rootComponents = this.applicationRef['components'];\n    if (rootComponents.length) return rootComponents[0];\n\n    throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer.');\n  }\n/**\n * Overrides the default root view container. This is useful for\n * things like ngUpgrade that doesn't have a ApplicationRef root.\n * \n * \n * \\@memberOf InjectionService\n * @param {?} container\n * @return {?}\n */\nsetRootViewContainer(container:any): void {\n    this._container = container;\n  }\n/**\n * Gets the html element for a component ref.\n * \n * \n * \\@memberOf InjectionService\n * @param {?} componentRef\n * @return {?}\n */\ngetComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n  }\n/**\n * Gets the root component container html element.\n * \n * \n * \\@memberOf InjectionService\n * @return {?}\n */\ngetRootViewContainerNode(): HTMLElement {\n    return this.getComponentRootNode(this.getRootViewContainer());\n  }\n/**\n * Projects the inputs onto the component\n * \n * \n * \\@memberOf InjectionService\n * @param {?} component\n * @param {?} options\n * @return {?}\n */\nprojectComponentInputs(component: ComponentRef<any>, options: any): ComponentRef<any> {\n    if(options) {\n      const /** @type {?} */ props = Object.getOwnPropertyNames(options);\n      for(const /** @type {?} */ prop of props) {\n        component.instance[prop] = options[prop];\n      }\n    }\n\n    return component;\n  }\n/**\n * Appends a component to a adjacent location\n * \n * \n * \\@memberOf InjectionService\n * @template T\n * @param {?} componentClass\n * @param {?=} options\n * @param {?=} location\n * @return {?}\n */\nappendComponent<T>(\n    componentClass: Type<T>,\n    options: any = {},\n    location: Element = this.getRootViewContainerNode()): ComponentRef<any> {\n\n    let /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentClass);\n    let /** @type {?} */ componentRef = componentFactory.create(this.injector);\n    let /** @type {?} */ appRef: any = this.applicationRef;\n    let /** @type {?} */ componentRootNode = this.getComponentRootNode(componentRef);\n\n    // project the options passed to the component instance\n    this.projectComponentInputs(componentRef, options);\n\n    appRef.attachView(componentRef.hostView);\n\n    componentRef.onDestroy(() => {\n      appRef.detachView(componentRef.hostView);\n    });\n\n    location.appendChild(componentRootNode);\n\n    return componentRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ApplicationRef, },\n{type: ComponentFactoryResolver, },\n{type: Injector, },\n];\n}\n\nfunction InjectionService_tsickle_Closure_declarations() {\n/** @type {?} */\nInjectionService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInjectionService.ctorParameters;\n/** @type {?} */\nInjectionService.prototype._container;\n/** @type {?} */\nInjectionService.prototype.applicationRef;\n/** @type {?} */\nInjectionService.prototype.componentFactoryResolver;\n/** @type {?} */\nInjectionService.prototype.injector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","export const /** @type {?} */ ShContextDefaultOptions: IShContextOptions = {\n  rtl: false,\n  theme: 'light'\n};\n\nexport interface IShContextMenuItem {\n  label?: ((context: any) => string) | string;\n  id?: string;\n  divider?: boolean;\n  onClick?($event: any): void;\n  visible?(context: any): boolean;\n  disabled?(context: any): boolean;\n  subMenu?: boolean;\n  subMenuItems?: IShContextMenuItem[];\n  data?: any;\n}\n\nexport interface IShContextOptions {\n  rtl?: boolean;\n  theme?: 'light' | 'dark'\n}\n\nexport interface BeforeMenuEvent {\n  event: MouseEvent;\n  items: IShContextMenuItem[];\n  open(items?: IShContextMenuItem[]): void;\n}\n","import { Injectable, NgModule } from '@angular/core';\nimport {InjectionService} from './injector.service';\nimport {IShContextOptions, ShContextDefaultOptions} from './sh-context-menu.models';\nexport class ShContextService {\n  options: IShContextOptions;\n/**\n * @param {?} opts\n * @return {?}\n */\nsetOptions(opts: IShContextOptions): IShContextOptions {\n    this.options = Object.assign({}, ShContextDefaultOptions, opts);\n    return this.options;\n  }\n/**\n * @return {?}\n */\ngetOptions(): IShContextOptions{\n    return this.options;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShContextService_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextService.ctorParameters;\n/** @type {?} */\nShContextService.prototype.options;\n}\n\nexport class ShContextServiceModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [ShContextService, InjectionService]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShContextServiceModule_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextServiceModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextServiceModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input, Output, EventEmitter, OnInit, ElementRef, ViewChild, AfterContentInit } from '@angular/core';\nimport { IShContextMenuItem, IShContextOptions } from './sh-context-menu.models';\nimport { ShContextService } from './sh-context-service';\n\nexport interface ShContextPosition {\n  top: number;\n  left: number;\n}\nexport class ShContextMenuComponent implements OnInit, AfterContentInit {\n   position: ShContextPosition;\n   items: IShContextMenuItem[];\n   dataContext: any;\n   onClose = new EventEmitter();\n\n  options: IShContextOptions;\n\n   childRef: ElementRef;\n/**\n * @param {?} ctxService\n */\nconstructor(\nprivate ctxService: ShContextService\n  ) { }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this.options = this.ctxService.getOptions();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    if (this.options.rtl)\n      this.setRtlLocation();\n  }\n/**\n * @param {?} item\n * @return {?}\n */\ngetLabel(item: IShContextMenuItem): string {\n    if (typeof item.label === 'string') {\n      return item.label;\n    } else if (typeof item.label === 'function') {\n      return item.label(this.dataContext);\n    }\n    return '';\n  }\n/**\n * @return {?}\n */\nclose() {\n    this.onClose.emit();\n  }\n/**\n * @param {?} item\n * @return {?}\n */\nonClick(item: IShContextMenuItem) {\n    if (this.isItemDisabled(item))\n      return;\n\n    if (item.onClick) {\n      this.close();\n\n      // invoke the onClick handler with a timeout of 0,\n      // so that the menu gets a chance to be closed before (screen refresh)\n      this.invokeOnClickWithTimeOut( item );\n    }\n  }\n/**\n * @param {?} item\n * @return {?}\n */\nprivate invokeOnClickWithTimeOut( item: IShContextMenuItem ) {\n    setTimeout( () => {\n      if ( item.onClick ) {\n        item.onClick({\n          menuItem: item,\n          dataContext: this.dataContext\n        });\n      }\n    }, 0);\n  }\n/**\n * @param {?} item\n * @return {?}\n */\nisItemDisabled(item: IShContextMenuItem) {\n    if (!item.disabled)\n      return false;\n\n    return item.disabled(this.dataContext);\n  }\n/**\n * @param {?} item\n * @return {?}\n */\nisItemVisible(item: IShContextMenuItem) {\n    if (!item.visible)\n      return true;\n\n    return item.visible(this.dataContext);\n  }\n/**\n * @return {?}\n */\nsetRtlLocation() {\n    const /** @type {?} */ elmRect: ClientRect =\n      this.childRef.nativeElement.getClientRects()[0];\n\n    this.position.left = this.position.left - elmRect.width;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sh-context-menu',\n  template: `\n    <div #childRef class=\"sh-context--container\"\n      [class.dark]=\"options.theme == 'dark'\"\n      [style.left]=\"position.left + 'px'\"\n      [style.top]=\"position.top + 'px'\"\n      [style.direction]=\"(options.rtl ? 'rtl' : 'ltr' )\">\n      <ul>\n          <li *ngFor=\"let item of items\"\n            [ngClass]=\"{'sh-menu-item': !item.divider, 'sh-context-divider': item.divider, 'sh-menu-disabled': isItemDisabled(item), 'sh-menu-hidden': !isItemVisible(item)}\"\n            (click)=\"onClick(item)\">\n              <div *ngIf=\"!item.divider && !item.subMenu\" [sh-html]=\"getLabel(item)\">\n              </div> \n              <div *ngIf=\"item.subMenu\"\n                [sh-context-sub-menu]=\"item.subMenuItems\"\n                [sh-data-context]=\"dataContext\"\n                (closeSubMenu)=\"close()\"\n                [sh-html]=\"item.label\">\n               <div [ngClass]=\"{'right-arrow': !options.rtl, 'left-arrow': options.rtl}\"></div>\n              </div>\n          </li>\n      </ul>\n    </div>\n`,\n  styles: [`\n  .sh-context--container{\n    font-family: sans-serif;\n    position: fixed;\n    background: #ececec;\n    min-width: 150px;\n    border: 1px solid rgba(0,0,0,0.2);\n    border-radius: 3px;\n    box-shadow: 0 0 10px 2px rgba(0,0,0,0.1);\n    z-index: 9999;\n    color: black;\n\n    \n  }\n  .dark{\n      background:#383737 !important;\n      color:white !important;\n    }\n  .sh-context--container ul{\n    list-style: none;\n    padding: 5px 0;\n    margin: 0;\n  }\n\n  .sh-context--container ul li{\n      padding: 5px 10px 5px 15px;\n      transition: all 0.15s;\n  }\n\n  .sh-context--container ul li.sh-context-divider{\n      height: 1px;\n      margin: 1px 1px 8px 1px;\n      overflow: hidden;\n      border-bottom: 1px solid #d0d0d0;\n      line-height: 10px;\n    }\n\n  .sh-context--container ul li.sh-menu-item:hover{\n      cursor: pointer;\n      background: #4b8bec;\n      color: white;\n  }\n \n   .sh-context--container.dark ul li.sh-menu-item:hover{\n      cursor: pointer;\n      background: #4b8bec;\n      color: white;\n  }\n  .sh-context--container ul li.sh-menu-disabled{\n      color: #d0d0d0;\n   }\n\n   .sh-context--container ul li.sh-menu-item.sh-menu-hidden{\n      display: none;\n   }\n\n  .sh-context--container ul li.sh-menu-disabled:hover{\n      cursor: not-allowed;\n      color: #d0d0d0;\n      background: #ececec;\n  }\n\n  .right-arrow{\n    float: right;\n    margin-left: 10px;\n    margin-top: 3px;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n    border-left: 8px solid black;\n  }\n\n  .left-arrow{\n    float: left;\n    margin-right: 10px;\n    margin-top: 3px;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n    border-right: 8px solid black;\n  }\n`]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ShContextService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input },],\n'items': [{ type: Input },],\n'dataContext': [{ type: Input },],\n'onClose': [{ type: Output },],\n'childRef': [{ type: ViewChild, args: ['childRef', ] },],\n};\n}\n\nfunction ShContextMenuComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextMenuComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextMenuComponent.ctorParameters;\n/** @type {?} */\nShContextMenuComponent.propDecorators;\n/** @type {?} */\nShContextMenuComponent.prototype.position;\n/** @type {?} */\nShContextMenuComponent.prototype.items;\n/** @type {?} */\nShContextMenuComponent.prototype.dataContext;\n/** @type {?} */\nShContextMenuComponent.prototype.onClose;\n/** @type {?} */\nShContextMenuComponent.prototype.options;\n/** @type {?} */\nShContextMenuComponent.prototype.childRef;\n/** @type {?} */\nShContextMenuComponent.prototype.ctxService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ShContextService} from './sh-context-service';\nimport {\n  Directive,\n  Input,\n  HostListener,\n  ComponentRef,\n  Output, EventEmitter\n} from '@angular/core';\n\nimport {ShContextOverlayComponent} from './sh-context-overlay.component';\nimport {ShContextMenuComponent} from './sh-context-menu.component';\nimport {InjectionService} from './injector.service';\nimport {BeforeMenuEvent, IShContextMenuItem, IShContextOptions} from './sh-context-menu.models';\nexport class ShContextMenuDirective {\n   menuItems: IShContextMenuItem[];\n   dataContext: any;\n   options: IShContextOptions;\n\n   onBeforeMenuOpen = new EventEmitter<BeforeMenuEvent>();\n\n  ctxComponent: ComponentRef<ShContextMenuComponent>;\n  overlayComponent: ComponentRef<ShContextOverlayComponent>;\n/**\n * @param {?} ctxService\n * @param {?} injectionService\n */\nconstructor(private ctxService: ShContextService,\nprivate injectionService: InjectionService) {\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nonClick(event: MouseEvent): boolean | void {\n    this.options = this.ctxService.setOptions(this.options);\n\n    this.closeMenu();\n\n    if ( this.contextMenuIsEmpty() ) {\n      return;\n    }\n\n    if (this.onBeforeMenuOpen.observers.length > 0) {\n      this.onBeforeMenuOpen.emit({\n        event: event,\n        items: this.menuItems,\n        open: (modifiedItems: IShContextMenuItem[] = this.menuItems) => this.createMenu(event, modifiedItems)\n      });\n    } else {\n      this.createMenu(event);\n    }\n\n    return false;\n  }\n/**\n * @param {?} event\n * @param {?=} items\n * @return {?}\n */\nprivate createMenu(event: MouseEvent, items: IShContextMenuItem[] = this.menuItems) {\n    this.overlayComponent = this.createOverlayComponent();\n    this.ctxComponent = this.createContextComponent();\n\n    this.registerBindings(items);\n    this.registerEvents();\n    this.setLocation(event);\n  }\n/**\n * @return {?}\n */\nregisterEvents() {\n    this.ctxComponent.instance.onClose.subscribe(() => {\n      this.closeMenu()\n    });\n\n    this.overlayComponent.instance.onClick.subscribe(() => {\n      this.closeMenu()\n    });\n  }\n/**\n * @param {?} menuItems\n * @return {?}\n */\nregisterBindings(menuItems: IShContextMenuItem[]) {\n    this.ctxComponent.instance.items = menuItems;\n    this.ctxComponent.instance.dataContext = this.dataContext;\n  }\n/**\n * @return {?}\n */\ncreateContextComponent(): ComponentRef<ShContextMenuComponent> {\n    return this.injectionService.appendComponent(ShContextMenuComponent);\n  }\n/**\n * @return {?}\n */\ncreateOverlayComponent(): ComponentRef<ShContextOverlayComponent> {\n    return this.injectionService.appendComponent(ShContextOverlayComponent);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nsetLocation(event: MouseEvent) {\n    let {clientX, clientY} = event;\n\n    this.ctxComponent.instance.position = {\n      top: clientY,\n      left: clientX\n    };\n  }\n/**\n * @return {?}\n */\ncloseMenu() {\n    if (this.ctxComponent)\n      this.ctxComponent.destroy();\n\n    if (this.overlayComponent)\n      this.overlayComponent.destroy();\n  }\n/**\n * @return {?}\n */\nprivate contextMenuIsEmpty(): boolean {\n    return !this.menuItems || this.menuItems.length === 0;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[sh-context]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ShContextService, },\n{type: InjectionService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'menuItems': [{ type: Input, args: ['sh-context', ] },],\n'dataContext': [{ type: Input, args: ['sh-data-context', ] },],\n'options': [{ type: Input, args: ['sh-options', ] },],\n'onBeforeMenuOpen': [{ type: Output, args: ['onBeforeMenuOpen', ] },],\n'onClick': [{ type: HostListener, args: ['contextmenu', ['$event'], ] },],\n};\n}\n\nfunction ShContextMenuDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextMenuDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextMenuDirective.ctorParameters;\n/** @type {?} */\nShContextMenuDirective.propDecorators;\n/** @type {?} */\nShContextMenuDirective.prototype.menuItems;\n/** @type {?} */\nShContextMenuDirective.prototype.dataContext;\n/** @type {?} */\nShContextMenuDirective.prototype.options;\n/** @type {?} */\nShContextMenuDirective.prototype.onBeforeMenuOpen;\n/** @type {?} */\nShContextMenuDirective.prototype.ctxComponent;\n/** @type {?} */\nShContextMenuDirective.prototype.overlayComponent;\n/** @type {?} */\nShContextMenuDirective.prototype.ctxService;\n/** @type {?} */\nShContextMenuDirective.prototype.injectionService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Output, ElementRef, EventEmitter, Input, HostListener, ViewContainerRef, ComponentFactoryResolver, ComponentRef, OnInit } from '@angular/core';\n\nimport { ShContextMenuComponent, ShContextPosition } from './sh-context-menu.component';\nimport { ShContextService } from './sh-context-service';\nimport {IShContextMenuItem, IShContextOptions} from './sh-context-menu.models';\nexport class ShContextSubMenuDirective implements OnInit {\n   menuItems: IShContextMenuItem[];\n   dataContext: any;\n   closeSubMenu = new EventEmitter();\n\n  options: IShContextOptions;\n  ctxComponent: ComponentRef<ShContextMenuComponent>;\n/**\n * @param {?} viewRef\n * @param {?} elmRef\n * @param {?} resolver\n * @param {?} ctxService\n */\nconstructor(\nprivate viewRef: ViewContainerRef,\nprivate elmRef: ElementRef,\nprivate resolver: ComponentFactoryResolver,\nprivate ctxService: ShContextService\n  ) { }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this.options = this.ctxService.getOptions();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nonMouseOver(event: MouseEvent) {\n    this.closeCurrent();\n    this.ctxComponent = this.createContextComponent();\n\n    this.registerBindings();\n    this.registerEvents();\n    this.setLocation();\n\n    return false;\n  }\n/**\n * @return {?}\n */\nregisterEvents() {\n    this.ctxComponent.instance.onClose.subscribe(() => {\n      this.closeSubMenu.emit();\n    });\n  }\n/**\n * @return {?}\n */\nregisterBindings() {\n    this.ctxComponent.instance.items = this.menuItems;\n    this.ctxComponent.instance.dataContext = this.dataContext;\n  }\n/**\n * @return {?}\n */\ncreateContextComponent(): ComponentRef<ShContextMenuComponent> {\n    let /** @type {?} */ shContextMenuFactory = this.resolver.resolveComponentFactory(ShContextMenuComponent);\n    let /** @type {?} */ shContextComponentRef = this.viewRef.createComponent(shContextMenuFactory);\n\n    return shContextComponentRef;\n  }\n/**\n * @return {?}\n */\nsetLocation() {\n    const { top, left, width } =\n      this.elmRef.nativeElement.getClientRects()[0];\n\n    let /** @type {?} */ position: ShContextPosition = {\n      top: top,\n      left: this.options.rtl ? left : left + width\n    };\n\n    this.ctxComponent.instance.position = position;\n  }\n/**\n * @return {?}\n */\ncloseMenu() {\n    this.closeSubMenu.emit();\n  }\n/**\n * @return {?}\n */\ncloseCurrent() {\n    this.viewRef.clear();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[sh-context-sub-menu]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: ElementRef, },\n{type: ComponentFactoryResolver, },\n{type: ShContextService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'menuItems': [{ type: Input, args: ['sh-context-sub-menu', ] },],\n'dataContext': [{ type: Input, args: ['sh-data-context', ] },],\n'closeSubMenu': [{ type: Output },],\n'onMouseOver': [{ type: HostListener, args: ['mouseover', ['$event'], ] },],\n};\n}\n\nfunction ShContextSubMenuDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextSubMenuDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextSubMenuDirective.ctorParameters;\n/** @type {?} */\nShContextSubMenuDirective.propDecorators;\n/** @type {?} */\nShContextSubMenuDirective.prototype.menuItems;\n/** @type {?} */\nShContextSubMenuDirective.prototype.dataContext;\n/** @type {?} */\nShContextSubMenuDirective.prototype.closeSubMenu;\n/** @type {?} */\nShContextSubMenuDirective.prototype.options;\n/** @type {?} */\nShContextSubMenuDirective.prototype.ctxComponent;\n/** @type {?} */\nShContextSubMenuDirective.prototype.viewRef;\n/** @type {?} */\nShContextSubMenuDirective.prototype.elmRef;\n/** @type {?} */\nShContextSubMenuDirective.prototype.resolver;\n/** @type {?} */\nShContextSubMenuDirective.prototype.ctxService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HtmlDirective } from './html.directive';\nimport { ShContextOverlayComponent } from './sh-context-overlay.component';\nimport { ShContextMenuDirective } from './sh-context-menu.directive';\nimport { ShContextMenuComponent } from './sh-context-menu.component';\nimport { ShContextSubMenuDirective } from './sh-context-sub-menu.directive';\nimport { ShContextServiceModule } from './sh-context-service';\nexport class ShContextMenuModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    ShContextMenuDirective,\n    ShContextMenuComponent,\n    ShContextSubMenuDirective,\n    ShContextOverlayComponent,\n    HtmlDirective\n  ],\n  exports: [ShContextMenuDirective],\n  imports: [\n    CommonModule,\n    ShContextServiceModule\n  ],\n  entryComponents: [\n    ShContextMenuComponent,\n    ShContextOverlayComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShContextMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nShContextMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShContextMenuModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["HtmlDirective","elmRef","this","prototype","ngAfterContentInit","nativeElement","insertAdjacentHTML","content","decorators","type","Directive","args","selector","ctorParameters","ElementRef","propDecorators","Input","ShContextOverlayComponent","onClick","EventEmitter","Component","template","styles","Output","InjectionService","applicationRef","componentFactoryResolver","injector","getRootViewContainer","_container","rootComponents","length","Error","setRootViewContainer","container","getComponentRootNode","componentRef","rootNodes","getRootViewContainerNode","projectComponentInputs","component","options","_i","props_1","Object","getOwnPropertyNames","prop","instance","appendComponent","componentClass","location","resolveComponentFactory","create","appRef","componentRootNode","attachView","hostView","onDestroy","detachView","appendChild","Injectable","ApplicationRef","ComponentFactoryResolver","Injector","ShContextDefaultOptions","rtl","theme","ShContextService","setOptions","opts","assign","getOptions","ShContextServiceModule","NgModule","providers","ShContextMenuComponent","ctxService","onClose","ngOnInit","setRtlLocation","getLabel","item","label","dataContext","close","emit","isItemDisabled","invokeOnClickWithTimeOut","_this","setTimeout","menuItem","disabled","isItemVisible","visible","elmRect","childRef","getClientRects","position","left","width","items","ViewChild","ShContextMenuDirective","injectionService","onBeforeMenuOpen","event","closeMenu","contextMenuIsEmpty","observers","menuItems","open","modifiedItems","createMenu","overlayComponent","createOverlayComponent","ctxComponent","createContextComponent","registerBindings","registerEvents","setLocation","subscribe","clientX","clientY","top","destroy","HostListener","ShContextSubMenuDirective","viewRef","resolver","closeSubMenu","onMouseOver","closeCurrent","shContextMenuFactory","createComponent","_a","clear","ViewContainerRef","ShContextMenuModule","declarations","exports","imports","CommonModule","entryComponents"],"mappings":"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"}
